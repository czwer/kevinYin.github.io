---
layout: post
title:  "JVM调优实践"
date:   2016-03-12 18:16
categories: JVM
permalink: /Priest/JVM-tuning-in-action

---


<h2>为何要进行JVM调优</h2>
	
基于没有修改过默认JVM参数的情况下，大多数情况下是我们是不需要进行JVM调优的。如果没有出现问题的时候，是不需要进行优化的，需要进行JVM优化的情况一般有以下情况：

>1.系统产生过多的超时的日志，即出现过多的系统超时的问题

>2.没有设置过-Xms (JVM堆初始化大小)和 -Xmx（最大堆内存） 的内存大小

>3.使用了 -server 选项（设置JVM的一些优化参数）

**总结：**`JVM调优是不得已时的选择`

<h2>调优的目标以及优化参数</h2>

<h3>调优的目标</h3>

在之前学习JVM垃圾回收时，学到JVM堆内存按年代分为年轻代和年老代，最终影响到系统性能的是老年代的垃圾回收过程，因为老年代的垃圾回收会产生中断JVM （STW）的问题，导致系统出现卡顿或者超时的问题，所以调优的目的就是调优老年代的垃圾回收。可以从2个方面进行调优老年代的垃圾回收，分别是：

>1.降低触发full GC的次数

>2.降低full GC的时间长度。

**降低触发full GC的次数：**   可以通过降低年轻代到年老代对象的数量以及扩大老年代内存来降低GC的次数。

**降低full GC的时间长度：**   可以降低老年代的内存大小来降低full GC的时间长度或者降低 full GC触发的老年代内存比例。

可以看到两点优化入口的方式，设置内存大小是有冲突的，所以内存带下过大以及过小都不好，需要设置适合的内存大小空间，所以是没有固定的优化方法，只能是从两者之间寻求一种平衡，最终的优化的方案都是在不断地试验中得到的。

<h3>优化参数</h3>

对调优的目标会有针对性的参数进行设置，JVM有很多参数可以进行优化，但是常用的参数就几个：

>1.`-Xms` (JVM堆初始化大小)和 `-Xmx`（最大堆内存）, 一般设置为两者参数值一样，目的是为了避免堆自动扩展

>2.`-XX:NewRatio` 设置年轻代与年老代的比例

>3.`-XX:NewSize` 设置年轻代的大小

>4.`-XX:SurvivorRatio`  设置Eden区与survival区的比例   


以上是网上NHN公司性能实验室工程师 Sangmin Lee的实践后总结常用到的，但是我个人觉得还有个参数也是可以同样有参考作用.

>5.`-XX:MaxTenuringThreshold`  设定老年代阀值的上限(年轻代的对象会在多次GC后如果还存留在幸存区，但不会一直保留，有规定的年限（默认15），超过年限后就会直接进入老年代)


<h2>理解GC日志</h2>

为了进一步了解GC的信息，其中最基本的就是GC的日志了，于是写个程序在运行过程中打印其中的GC日志信息，来理解GC的过程。
 
其 JVM的参数设置为：

	-verbose:gc -Xms20M -Xmx20M -Xmn5M
	-XX:+PrintGCDetails
	-XX:SurvivorRatio=8
	-XX:MaxTenuringThreshold=15

打印出的日志如下：



<h2>总结</h2>













